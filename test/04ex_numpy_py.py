# -*- coding: utf-8 -*-
"""04ex_numpy.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVPIuuPnSdt6GVYRciwT2hot32jGzb8a
"""

import numpy as np
import numpy.random as npr
from numpy import newaxis
import math
import matplotlib.pyplot as plt
from math import pow, ceil
import timeit
import pylab

#Ex1
m = np.arange(12).reshape((3, 4))
print("Total:", m.mean())
print("Row: ", m.mean(1))
print("Column: ", m.mean(0))

#Ex2
u = np.array([1, 3, 5, 7])
v = np.array([2, 4, 6, 8])
print(u)
print(v)
print("outer in numpy:")
print(np.outer(u, v))
print("list comprehension:")
print([i * j for i in u for j in v])
print("numpy broadcasting operations:")
print(u[:, newaxis] * v)

#Ex3
random = 3 * npr.random_sample((10, 6)) - 0
print("A float random number matrix of 10 by 6 , distributed between 0 and 3 according to a flat distribution: ")
print(random)
arr = np.array(random)
mask = (random < 0.3)
print("Mask: \n", mask)
random[random < 0.3] = 0
print("\n Final result: ")
print(random)

#Ex4

array = np.linspace(0, 2*math.pi, num=100)
print("The linear space with 100 values between 0 and 2*pi (inclusive):\n", array)
print("\n Extracted every 10th element using the slice notation:\n", array[::10])
print("\n Reversed array by the slice notation:\n", array[::-1])
elements = np.abs(np.sin(array)-np.cos(array)) < 0.1
print("\n Elements where the absolute difference between "
      "the sin and cos functions is smaller than 0.1:\n", array[elements])
pylab.title("The plot")
pylab.plot(array, np.sin(array), array, np.cos(array))
pylab.show()

#EX5
print("The table:")
ns = np.arange(1, 11)
m = ns[:, None] * ns[None, :]
print(m)
print("\n The trace: ", m.trace())
print("\n The anti-diagonal: ", np.flipud(m).diagonal())
print("\n The diagonal offset by 1 upwards: ", m.diagonal(offset=1))

#Ex6

miles = np.array([0, 198, 303, 736, 871, 1175, 1475, 1544, 1913, 2448])
distance = np.abs(miles - miles[:, np.newaxis])
print("\n The distance between the cities:\n", distance)
print("\n Convert to km: \n", distance/0.62137119)

#EX7

starting_time=timeit.default_timer()
N=100
x=np.full((N,),True)
x[0],x[1]=False,False
for i in range(2,N):
    for j in range(i+1,N):
        if j%i==0 and x[j]== True:
            x[j]=False

y=np.arange(N)
print('The numbers between 0 and 100:\n',y[x])
print("Difference in the first time :", timeit.default_timer() - starting_time,'\n')

starting_time=timeit.default_timer()
x=np.full((N,),True)
x[0],x[1]=False,False

for i in range(2,N):
    for j in range(i**2,N,i):
        if j%i==0 and x[j]== True:
            x[j]=False

y=np.arange(N)
print('The numbers between 0 and 100:\n',y[x])
print("Difference when it is optimized:", timeit.default_timer() - starting_time)

#EX8

walkers=1000
steps=200
x=np.random.randint(0,2,(walkers,steps))
x[x==0]=-1

distance = x.sum(axis=1)
print('The distance for each walker is:\n',distance)

distance_squared=np.square(distance)
mean_squared_distances=np.mean( np.cumsum(x, axis=1)**2 , axis=0)
print('The distance for each walker is:\n',mean_squared_distances)