# -*- coding: utf-8 -*-
"""02ex_fundamentals.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NOMp9oTp5Twxf0bOnoSQW8GyQcOHm9q3
"""

#EX1
def f(alist):
    x = 5
    alist = [1, 2, 3]
    for i in range(x):
        alist.append(i)
    return alist

alist = [1, 2, 3]
ans = f(alist)
print(ans)
print(alist)

#EX2

ans = [x * x for x in range(10) if x % 2 == 1]
print(ans)

#EX3
x = ['house','dog','cat', 'hat' , 'hey']
n= 4
ans = list(map(lambda i: x[i] , filter(lambda i: len(x[i]) <= n , range(len(x)))))
print(ans)

#EX4

def a(word):
    return len(word)

lang = {"Python" : 3, "Java" : '', "Cplusplus" : 'test', "Php" : 0.7}
ans=list(map(a,lang.keys()))
print(ans)

#EX5
language_scores = [('Python', 97), ('Cplusplus', 81), ('Php', 45), ('Java', 32)]
language_scores.sort(key = lambda x: x[0])
print(language_scores)

#EX6
square = (lambda x: x**2)
cube = (lambda x: x**3)
power_6 = (lambda x :  cube(square(x))) 
print(power_6(3))

#EX7
def hello(func):
    def wrapper(x):
        print("Hello World")
        result = func(x)
        return result
    return wrapper

@hello
def square(x):
    return x*x

x = int(input("Please type a number: "))
print(square(x))

#EX8
def recfib(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return recfib(n-1)+recfib(n-2)

fib_list=[]
for i in range(20):
    fib_list.append(recfib(i))

print(fib_list)

#EX9
import timeit

def loopfib(n):
    a = 0
    b = 1
    if n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(n):
            if(i == 0):
                fib_list.append(a)
            elif(i == 1):
                fib_list.append(b)
            else:
                c = a + b
                a = b
                b = c
                fib_list.append(c)

fib_list=[]
loopfib(20)
print(fib_list)


def recfib(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return recfib(n-1)+recfib(n-2)

fib_list=[]
for i in range(20):
    fib_list.append(recfib(i))

print(fib_list)

res_loop = timeit.timeit(stmt='loopfib(20)', globals=globals(), number=1)
res_rec = timeit.timeit(stmt='recfib(20)', globals=globals(), number=1)

print(res_loop)
print(res_rec)

#EX10
from ast import increment_lineno
import math

class polygon:

    x = []

    def __init__(self, poly_sides):
        if len(poly_sides) >= 3:
            self.x = list(poly_sides)
        else:
            print("Sides of the polygon must be at least 3!")
            self.__del__

    def __del__(self):
        print("Destructor called")

    def getSide(self,n):
        return self.x[n]

    def setSide(self, n, new_value):
        self.x[n] = new_value

    def getSides(self):
        return len(self.x)

    def printPoly(self):
        return self.x

    def perimeter(self):
        perim_poly = 0
        for i in range(len(self.x)):
            perim_poly = perim_poly + self.x[i]
        return perim_poly

    def getOrderedSides(self,increasing_sides):
        return tuple(sorted(self.x,reverse = not increasing_sides))

a = polygon((3, 3, 4, 6))
print(a.printPoly())
a.setSide(0,10)
print(a.printPoly())
print(a.perimeter())

print(a.getOrderedSides(True))

#EX11
from ast import increment_lineno
from cmath import rect
import math

class polygon:

    x = []

    def __init__(self, poly_sides):
        if len(poly_sides) >= 3:
            self.x = list(poly_sides)
        else:
            print("Sides of the polygon must be at least 3!")
            self.__del__

    def __del__(self):
        print("Destructor called")

    def getSide(self,n):
        return self.x[n]

    def setSide(self, n, new_value):
        self.x[n] = new_value

    def getSides(self):
        return len(self.x)

    def printPoly(self):
        return self.x

    def perimeter(self):
        perim_poly = 0
        for i in range(len(self.x)):
            perim_poly = perim_poly + self.x[i]
        return perim_poly

    def getOrderedSides(self,increasing_sides):
        return tuple(sorted(self.x,reverse = not increasing_sides))

class rectangle(polygon):

    def __init__(self, components):
        if len(components) == 2:
            self.x.append(components[0])
            self.x.append(components[1])
            self.x.append(components[0])
            self.x.append(components[1])
        else:
            print("Rectangles must have 4 sides!")

    def area(self):
        return self.x[0]*self.x[1]

a = rectangle([3, 7])
print(a.printPoly())
print(a.area())